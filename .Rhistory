rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
set.seed(11)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
y
dim(y)
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
set.seed(11)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=svm(as.factor(bioactivity)~.,train)
###Implement decision tree
tree=rpart(as.factor(bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
prd=(prd)
real
table(predicted=round(prd),reality=real)
prd=(prd[,1])
real
table(predicted=round(prd),reality=real)
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
set.seed(11)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart(as.factor(bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
prd=(prd[,1])
real
table(predicted=round(prd),reality=real)
set.seed(15)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart(as.factor(bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
prd=(prd[,1])
real
table(predicted=round(prd),reality=real)
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
set.seed(15)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
prd=(prd[,1])
real
table(predicted=round(prd),reality=real)
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
set.seed(15)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
prd=(prd[,1])
prd=(prd)
real
table(predicted=round(prd),reality=real)
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
set.seed(15)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
###Plot the confusion matrix
table(predicted=round(prd),reality=real)
###Plot the confusion matrix
res=table(predicted=round(prd),reality=real)
diag(res)
accuracy=sum(diag(res))/sum(res)
accuracy
40/54
library(stringr)
###Plot the confusion matrix
res=table(predicted=round(prd),reality=real)
cat(str_c("Accuracy is",sum(diag(res))/sum(res),"\n"))
###Plot the confusion matrix
res=table(predicted=round(prd),reality=real)
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
print(res)
tree=svm(as.factor(bioactivity)~.,train)
tree=svm(as.factor(bioactivity)~.,train,scale = F)
prd=predict(tree,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=round(prd),reality=real)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
prd
tree=svm(as.factor(bioactivity)~.,train,scale = F)
prd=predict(tree,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=(prd),reality=real)
print(res)
set.seed(150)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=round(prd),reality=real)
print(res)
###Accuracy = ?
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
tree=svm(as.factor(bioactivity)~.,train,scale = F)
prd=predict(tree,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=(prd),reality=real)
print(res)
###Implement SVM
mod=svm(as.factor(bioactivity)~.,train,scale = F)
prd=predict(mod,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=prd,reality=real)
print(res)
###Accuracy = ?
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
library(stringr)
set.seed(150)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=round(prd),reality=real)
print(res)
###Accuracy = ?
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
###Implement SVM
mod=svm(as.factor(bioactivity)~.,train,scale = F)
prd=predict(mod,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=prd,reality=real)
print(res)
###Accuracy = ?
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
###Initialization
library(Rcpi)
library(rpart)
library(dplyr)
library(e1071)
library(stringr)
set.seed(93)
rsq = function(x,y){
cor(x,y)*cor(x,y)
}
###Import the chemicals
x=readMolFromSmi("Smile_Files.smi")
###Compute MACCS166 chemical fingerprints for the molecules
y=extractDrugMACCSComplete(x)
###Load Bioactivity data taken from ChEMBL
bio=read.table("Bio2.csv",header = T)
###Process NAs. Delete them from both data, bio(Bioactivity data) and y(MACCS166 matrix)
ind=which(is.na(bio))
bio=na.omit(bio)
y=as.data.frame(y)
y=y[-ind,]
y$bioactivity=(bio[,1])
###Take a look at the data used for the decision tree algorithm
head(y)
y
dim(y)
###Prepare test and train datasets
N=70 # N = amount of data used for training algorithm out of all data = dim(y)[1] = 124
sind=sample(1:(dim(y)[1]),70)
train=y[sind,]
test=y[-sind,]
###Take a look at train and test datasets
head(train)
head(test)
dim(train)
dim(test)
###Implement decision tree
tree=rpart((bioactivity)~.,train)
prd=predict(tree,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=round(prd),reality=real)
print(res)
###Accuracy = ?
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
###Implement SVM
mod=svm(as.factor(bioactivity)~.,train,scale = F)
prd=predict(mod,test[,-167])
real=test[,167]
###Print the confusion matrix
res=table(predicted=prd,reality=real)
print(res)
###Accuracy = ?
cat(str_c("Accuracy is ",sum(diag(res))/sum(res),"\n"))
